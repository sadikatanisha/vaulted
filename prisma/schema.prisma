generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  BUYER
  SELLER
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role         Role      @default(BUYER)

  artworks      Artwork[] @relation("SellerArtworks")
  bids          Bid[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Artwork {
  id            String   @id @default(cuid())
  title         String
  description   String
  primaryImage  String? 
  images        ArtworkImage[]  
  startingPrice Float
  currentPrice  Float    @default(0)
  category      String?
  status        AuctionStatus @default(ACTIVE)
  
  startTime     DateTime
  endTime       DateTime

  sellerId      String
  seller        User     @relation("SellerArtworks", fields: [sellerId], references: [id])

  bids          Bid[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ArtworkImage {
  id        String   @id @default(cuid())
  artwork   Artwork  @relation(fields: [artworkId], references: [id])
  artworkId String
  url       String
  order     Int?     // optional: control display order
  alt       String?  // optional alt text
  createdAt DateTime @default(now())
}

enum AuctionStatus {
  ACTIVE
  ENDED
  CANCELLED
}

// Bids placed by users
model Bid {
  id         String   @id @default(cuid())
  amount     Float
  createdAt  DateTime @default(now())

  artworkId  String
  artwork    Artwork  @relation(fields: [artworkId], references: [id])

  bidderId   String
  bidder     User     @relation(fields: [bidderId], references: [id])
}